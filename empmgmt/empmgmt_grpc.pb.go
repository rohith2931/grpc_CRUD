// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: empmgmt/empmgmt.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmpManagementClient is the client API for EmpManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmpManagementClient interface {
	CreateNewEmp(ctx context.Context, in *NewEmp, opts ...grpc.CallOption) (*Emp, error)
	GetEmps(ctx context.Context, in *GetEmpParams, opts ...grpc.CallOption) (*EmpList, error)
	UpdateEmp(ctx context.Context, in *Emp, opts ...grpc.CallOption) (*Emp, error)
	DeleteEmp(ctx context.Context, in *Emp, opts ...grpc.CallOption) (*Emp, error)
}

type empManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewEmpManagementClient(cc grpc.ClientConnInterface) EmpManagementClient {
	return &empManagementClient{cc}
}

func (c *empManagementClient) CreateNewEmp(ctx context.Context, in *NewEmp, opts ...grpc.CallOption) (*Emp, error) {
	out := new(Emp)
	err := c.cc.Invoke(ctx, "/empmgmt.EmpManagement/CreateNewEmp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *empManagementClient) GetEmps(ctx context.Context, in *GetEmpParams, opts ...grpc.CallOption) (*EmpList, error) {
	out := new(EmpList)
	err := c.cc.Invoke(ctx, "/empmgmt.EmpManagement/GetEmps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *empManagementClient) UpdateEmp(ctx context.Context, in *Emp, opts ...grpc.CallOption) (*Emp, error) {
	out := new(Emp)
	err := c.cc.Invoke(ctx, "/empmgmt.EmpManagement/UpdateEmp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *empManagementClient) DeleteEmp(ctx context.Context, in *Emp, opts ...grpc.CallOption) (*Emp, error) {
	out := new(Emp)
	err := c.cc.Invoke(ctx, "/empmgmt.EmpManagement/DeleteEmp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmpManagementServer is the server API for EmpManagement service.
// All implementations must embed UnimplementedEmpManagementServer
// for forward compatibility
type EmpManagementServer interface {
	CreateNewEmp(context.Context, *NewEmp) (*Emp, error)
	GetEmps(context.Context, *GetEmpParams) (*EmpList, error)
	UpdateEmp(context.Context, *Emp) (*Emp, error)
	DeleteEmp(context.Context, *Emp) (*Emp, error)
	mustEmbedUnimplementedEmpManagementServer()
}

// UnimplementedEmpManagementServer must be embedded to have forward compatible implementations.
type UnimplementedEmpManagementServer struct {
}

func (UnimplementedEmpManagementServer) CreateNewEmp(context.Context, *NewEmp) (*Emp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewEmp not implemented")
}
func (UnimplementedEmpManagementServer) GetEmps(context.Context, *GetEmpParams) (*EmpList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmps not implemented")
}
func (UnimplementedEmpManagementServer) UpdateEmp(context.Context, *Emp) (*Emp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmp not implemented")
}
func (UnimplementedEmpManagementServer) DeleteEmp(context.Context, *Emp) (*Emp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmp not implemented")
}
func (UnimplementedEmpManagementServer) mustEmbedUnimplementedEmpManagementServer() {}

// UnsafeEmpManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmpManagementServer will
// result in compilation errors.
type UnsafeEmpManagementServer interface {
	mustEmbedUnimplementedEmpManagementServer()
}

func RegisterEmpManagementServer(s grpc.ServiceRegistrar, srv EmpManagementServer) {
	s.RegisterService(&EmpManagement_ServiceDesc, srv)
}

func _EmpManagement_CreateNewEmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEmp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpManagementServer).CreateNewEmp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empmgmt.EmpManagement/CreateNewEmp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpManagementServer).CreateNewEmp(ctx, req.(*NewEmp))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmpManagement_GetEmps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmpParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpManagementServer).GetEmps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empmgmt.EmpManagement/GetEmps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpManagementServer).GetEmps(ctx, req.(*GetEmpParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmpManagement_UpdateEmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Emp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpManagementServer).UpdateEmp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empmgmt.EmpManagement/UpdateEmp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpManagementServer).UpdateEmp(ctx, req.(*Emp))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmpManagement_DeleteEmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Emp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpManagementServer).DeleteEmp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empmgmt.EmpManagement/DeleteEmp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpManagementServer).DeleteEmp(ctx, req.(*Emp))
	}
	return interceptor(ctx, in, info, handler)
}

// EmpManagement_ServiceDesc is the grpc.ServiceDesc for EmpManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmpManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "empmgmt.EmpManagement",
	HandlerType: (*EmpManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewEmp",
			Handler:    _EmpManagement_CreateNewEmp_Handler,
		},
		{
			MethodName: "GetEmps",
			Handler:    _EmpManagement_GetEmps_Handler,
		},
		{
			MethodName: "UpdateEmp",
			Handler:    _EmpManagement_UpdateEmp_Handler,
		},
		{
			MethodName: "DeleteEmp",
			Handler:    _EmpManagement_DeleteEmp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "empmgmt/empmgmt.proto",
}
